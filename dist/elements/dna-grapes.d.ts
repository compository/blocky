import { LitElement, PropertyValues } from 'lit-element';
import { TopAppBar } from 'scoped-material-components/mwc-top-app-bar';
import { IconButton } from 'scoped-material-components/mwc-icon-button';
import { CompositoryService, ZomeDef } from '@compository/lib';
import { GrapesService } from '../grapes.service';
import { CircularProgress } from 'scoped-material-components/mwc-circular-progress';
import { Button } from 'scoped-material-components/mwc-button';
import { RenderTemplate } from '../types';
declare const DnaGrapes_base: typeof LitElement & import("@open-wc/dedupe-mixin").Constructor<import("@open-wc/scoped-elements/types/src/types").ScopedElementsHost> & typeof import("@open-wc/scoped-elements/types/src/types").ScopedElementsHost;
export declare abstract class DnaGrapes extends DnaGrapes_base {
    _profilesZomeExistsInDna: boolean;
    _profileAlreadyCreated: boolean;
    _editing: boolean;
    _loading: boolean;
    _grapesContainer: HTMLElement;
    _zomeLenses: [ZomeDef, File][];
    _templateToRender: RenderTemplate | undefined;
    abstract get _compositoryService(): CompositoryService;
    abstract get _grapesService(): GrapesService;
    _editor: any | undefined;
    updated(changedValues: PropertyValues): void;
    firstUpdated(): Promise<void>;
    setupRenderIframe(): Promise<void>;
    setupGrapes(): Promise<void>;
    setupIframe(iframe: HTMLIFrameElement): void;
    addRenderTemplateJs(iframe: HTMLIFrameElement): void;
    addZomeLensesToGrapes(zomeDef: ZomeDef, setupLensesFile: File, editor: any): Promise<void>;
    addZomeLensesToIframe(zomeDef: ZomeDef, setupLensesFileText: string, iframe: HTMLIFrameElement): Promise<void>;
    loadRenderTemplate(): Promise<void>;
    loadProfilesExists(): Promise<void>;
    loadRenderers(): Promise<void>;
    showProfilePromt(): boolean;
    renderBarItems(): import("lit-element").TemplateResult;
    renderContent(): import("lit-element").TemplateResult;
    render(): import("lit-element").TemplateResult;
    static get scopedElements(): {
        'mwc-top-app-bar': typeof TopAppBar;
        'mwc-icon-button': typeof IconButton;
        'mwc-button': typeof Button;
        'mwc-circular-progress': typeof CircularProgress;
    };
    static get styles(): any[];
}
export {};
