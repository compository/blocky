{"version":3,"file":"blocky-block-board.js","sourceRoot":"","sources":["../../src/elements/blocky-block-board.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Constructor,\n  css,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n} from 'lit-element';\nimport { CompositoryService, fetchLensesForAllZomes } from '@compository/lib';\nimport { Block, BlockBoard, BlockLayoutNode, BlockSet } from 'block-board';\nimport { membraneContext } from '@holochain-open-dev/membrane-context';\nimport { AppWebsocket, CellId } from '@holochain/conductor-api';\nimport { ScopedElementsMixin as Scoped } from '@open-wc/scoped-elements';\nimport { CircularProgress } from 'scoped-material-components/mwc-circular-progress';\nimport { Fab } from 'scoped-material-components/mwc-fab';\nimport { BlockyService } from '../blocky.service';\n\nexport class BlockyBlockBoard extends membraneContext(\n  Scoped(LitElement) as Constructor<LitElement>\n) {\n  @property()\n  compositoryCellId!: CellId;\n\n  static get scopedElements() {\n    return {\n      'block-board': BlockBoard,\n      'mwc-circular-progress': CircularProgress,\n      'mwc-fab': Fab,\n    };\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: flex;\n      }\n      .fab {\n        position: fixed;\n        right: 40px;\n        bottom: 40px;\n      }\n    `;\n  }\n\n  @property({ type: Array })\n  _blockSets: Array<BlockSet> | undefined = undefined;\n  @property({ type: Array })\n  _blockLayout: BlockLayoutNode | undefined = undefined;\n\n  get blockyService(): BlockyService {\n    return new BlockyService(\n      this.membraneContext.appWebsocket as AppWebsocket,\n      this.membraneContext.cellId as CellId\n    );\n  }\n  get board(): BlockBoard {\n    return this.shadowRoot?.getElementById('board') as BlockBoard;\n  }\n\n  updated(changedValues: PropertyValues) {\n    super.updated(changedValues);\n    if (\n      changedValues.has('membraneContext') &&\n      this.membraneContext.appWebsocket\n    ) {\n      this.loadRenderers();\n    }\n  }\n\n  async loadRenderers() {\n    // Get the renderers for each of the zomes\n    const zomeLenses = await fetchLensesForAllZomes(\n      new CompositoryService(\n        this.membraneContext.appWebsocket as AppWebsocket,\n        this.compositoryCellId\n      ),\n      this.membraneContext.cellId as CellId\n    );\n\n    this._blockSets = zomeLenses\n      .filter(([def, lenses]) => lenses !== undefined)\n      .map(\n        ([def, lenses]) =>\n          ({\n            name: def.name,\n            blocks: lenses?.standalone.map(s => ({\n              name: s.name,\n              render: (root: ShadowRoot) =>\n                s.render(\n                  root,\n                  this.membraneContext.appWebsocket as AppWebsocket,\n                  this.membraneContext.cellId as CellId\n                ),\n            })),\n          } as BlockSet)\n      );\n\n    const layouts = await this.blockyService.getAllBoardLayouts();\n    this._blockLayout = layouts[0];\n\n    setTimeout(() => {\n      this.board.editing = !this._blockLayout;\n      this.requestUpdate();\n    });\n  }\n\n  async createBoard(layout: BlockLayoutNode) {\n    this.board.editing = false;\n\n    this.requestUpdate();\n\n    if (JSON.stringify(this._blockLayout) !== JSON.stringify(layout)) {\n      this._blockLayout = layout;\n      await this.blockyService.createBoardLayout(layout);\n    }\n  }\n\n  render() {\n    if (this._blockSets === undefined)\n      return html`<mwc-circular-progress></mwc-circular-progress>`;\n    return html`<block-board\n        id=\"board\"\n        style=\"flex: 1;\"\n        .blockSets=${this._blockSets}\n        .blockLayout=${this._blockLayout}\n        @board-saved=${(e: CustomEvent) =>\n          this.createBoard(e.detail.blockLayout)}\n      ></block-board>\n\n      ${this.board && !this.board.editing\n        ? html`\n            <mwc-fab\n              label=\"edit\"\n              class=\"fab\"\n              @click=${() => {\n                this.board.editing = true;\n                this.requestUpdate();\n              }}\n              icon=\"edit\"\n            >\n            </mwc-fab>\n          `\n        : html``} `;\n  }\n}\n"]}