{"version":3,"file":"blocky-block-board.js","sourceRoot":"","sources":["../../src/elements/blocky-block-board.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAC9D,OAAO,EACL,kBAAkB,EAClB,yBAAyB,GAE1B,MAAM,aAAa,CAAC;AACrB,OAAO,EAAS,UAAU,EAAE,MAAM,aAAa,CAAC;AAChD,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAC;AAE7D,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,gBAAgB,EAAE,MAAM,uDAAuD,CAAC;AAEzF,MAAM,OAAO,gBAAiB,SAAQ,eAAe,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAAzE;;QAoBE,YAAO,GAA6B,SAAS,CAAC;IA0BhD,CAAC;IA1CC,MAAM,KAAK,cAAc;QACvB,OAAO;YACL,aAAa,EAAE,UAAU;YACzB,uBAAuB,EAAE,gBAAgB;SAC1C,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,MAAM;QACf,OAAO,GAAG,CAAA;;;;KAIT,CAAC;IACJ,CAAC;IAKD,KAAK,CAAC,YAAY;QAChB,0CAA0C;QAC1C,MAAM,aAAa,GAAG,MAAM,yBAAyB,CACnD,IAAI,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,EACjE,IAAI,CAAC,MAAM,CACZ,CAAC;QAEF,MAAM,mBAAmB,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAE3E,MAAM,SAAS,GAAI,EAA2B,CAAC,MAAM,CACnD,GAAG,mBAAmB,CACvB,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;IAC3B,CAAC;IAED,MAAM;QACJ,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS;YAC5B,OAAO,IAAI,CAAA,iDAAiD,CAAC;QAC/D,OAAO,IAAI,CAAA;;yBAEU,IAAI,CAAC,OAAO;oBACjB,CAAC;IACnB,CAAC;CACF;AA5CC;IADC,QAAQ,EAAE;2DACgB;AAkB3B;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;iDACoB","sourcesContent":["import { css, html, LitElement, property } from 'lit-element';\nimport {\n  CompositoryService,\n  fetchRenderersForAllZomes,\n  StandaloneRenderer,\n} from 'compository';\nimport { Block, BlockBoard } from 'block-board';\nimport { membraneContext } from 'holochain-membrane-context';\nimport { CellId } from '@holochain/conductor-api';\nimport { Scoped } from 'scoped-elements';\nimport { CircularProgress } from 'scoped-material-components/dist/mwc-circular-progress';\n\nexport class BlockyBlockBoard extends membraneContext(Scoped(LitElement)) {\n  @property()\n  compositoryCellId!: CellId;\n\n  static get scopedElements() {\n    return {\n      'block-board': BlockBoard,\n      'mwc-circular-progress': CircularProgress,\n    };\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: flex;\n      }\n    `;\n  }\n\n  @property({ type: Array })\n  _blocks: Array<Block> | undefined = undefined;\n\n  async firstUpdated() {\n    // Get the renderers for each of the zomes\n    const zomeRenderers = await fetchRenderersForAllZomes(\n      new CompositoryService(this.appWebsocket, this.compositoryCellId),\n      this.cellId\n    );\n\n    const standaloneRenderers = zomeRenderers.map(r => r.renderers.standalone);\n\n    const flattened = ([] as StandaloneRenderer[]).concat(\n      ...standaloneRenderers\n    );\n\n    this._blocks = flattened;\n  }\n\n  render() {\n    if (this._blocks === undefined)\n      return html`<mwc-circular-progress></mwc-circular-progress>`;\n    return html`<block-board\n      style=\"flex: 1;\"\n      .availableBlocks=${this._blocks}\n    ></block-board>`;\n  }\n}\n"]}