
/* eslint no-unused-vars: 0 */
import ifDefined from '@ui5/webcomponents-base/dist/renderer/ifDefined.js';
import { html, svg, repeat, classMap, styleMap, unsafeHTML, setTags, setSuffix } from '@ui5/webcomponents-base/dist/renderer/LitRenderer.js';
const block0 = (context) => { return html`<div class="ui5-slider-root" @mousedown="${context._onmousedown}" @touchstart="${context._ontouchstart}" @mouseover="${context._onmouseover}" @mouseout="${context._onmouseout}" dir="${ifDefined(context.effectiveDir)}"><div class="ui5-slider-inner">${ context.step ? block1(context) : undefined }<div class="ui5-slider-progress-container"><div class="ui5-slider-progress" style="${styleMap(context.styles.progress)}"></div></div><div class="ui5-slider-handle ui5-slider-handle--start" style="${styleMap(context.styles.startHandle)}">${ context.showTooltip ? block5(context) : undefined }</div><div class="ui5-slider-handle ui5-slider-handle--end" style="${styleMap(context.styles.endHandle)}">${ context.showTooltip ? block6(context) : undefined }</div></div></div>`; };
const block1 = (context) => { return html`${ context.showTickmarks ? block2(context) : undefined }`; };
const block2 = (context) => { return html`<div class="ui5-slider-tickmarks" style="${styleMap(context.styles.tickmarks)}"></div>${ context.labelInterval ? block3(context) : undefined }`; };
const block3 = (context) => { return html`<ul class="ui5-slider-labels ${classMap(context.classes.labelContainer)}" style="${styleMap(context.styles.labelContainer)}">${ repeat(context._labels, (item, index) => item._id || index, (item, index) => block4(item, index, context)) }</ul>`; };
const block4 = (item, index, context) => { return html`<li style="${styleMap(context.styles.label)}">${ifDefined(item)}</li>`; };
const block5 = (context) => { return html`<div class="ui5-slider-tooltip ui5-slider-tooltip--start" style="${styleMap(context.styles.tooltip)}"><span class="ui5-slider-tooltip-value">${ifDefined(context.tooltipStartValue)}</span></div>`; };
const block6 = (context) => { return html`<div class="ui5-slider-tooltip ui5-slider-tooltip--end" style="${styleMap(context.styles.tooltip)}"><span class="ui5-slider-tooltip-value">${ifDefined(context.tooltipEndValue)}</span></div>`; };


const main = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0(context);
};
 
export default main;